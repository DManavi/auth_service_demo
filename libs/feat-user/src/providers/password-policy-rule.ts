import * as assert from '#libs/util-misc/assert';

import * as User from '../domain/user';

export interface PasswordPolicyRule {
  /**
   * Function that checks if the password satisfies the rule.
   */
  check: (opts: { user: User.Model; password: string }) => Promise<void>;
}

export class MinLengthRule implements PasswordPolicyRule {
  async check({
    password,
  }: {
    user: User.Model;
    password: string;
  }): Promise<void> {
    assert.isTrue(
      password.length >= 8,
      `Password must be at least 8 characters long.`
    );
  }
}

export class ComplexityRule implements PasswordPolicyRule {
  async check({
    password,
  }: {
    user: User.Model;
    password: string;
  }): Promise<void> {
    // DM: These regexes are generated by copilot
    assert.isTrue(
      /[A-Z]/.test(password),
      `Password must contain at least one uppercase letter.`
    );
    assert.isTrue(
      /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]+/.test(password),
      `Password must contain at least one special character.`
    );
    assert.isTrue(
      /[0-9]/.test(password),
      `Password must contain at least one digit.`
    );
  }
}

export class PersonalInformationRule implements PasswordPolicyRule {
  async check({
    user,
    password,
  }: {
    user: User.Model;
    password: string;
  }): Promise<void> {
    const usernameRegex = new RegExp(user.username, 'ig');
    assert.isFalse(
      usernameRegex.test(password),
      `Password must not contain the username.`
    );
  }
}
